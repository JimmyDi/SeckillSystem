package com.soecode.lyf.service.impl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.soecode.lyf.dao.AppointmentDao;
import com.soecode.lyf.dao.BookDao;
import com.soecode.lyf.dto.AppointExecution;
import com.soecode.lyf.entity.Appointment;
import com.soecode.lyf.entity.Book;
import com.soecode.lyf.enums.AppointStateEnum;
import com.soecode.lyf.exception.AppointException;
import com.soecode.lyf.exception.NoNumberException;
import com.soecode.lyf.exception.RepeatAppointException;
import com.soecode.lyf.service.BookService;

@Service
public class BookServiceImpl implements BookService{
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private BookDao bookDao;
	
	@Autowired
	private AppointmentDao appointmentDao;
	
	@Override
	public List<Book> getList(){
		return bookDao.queryAll(0,1000);
	}
	
	@Override
	@Transactional
	public AppointExecution appoint(long bookId,long studentId){
		try{
			int update = bookDao.reduceNumber(bookId);
			if(update <=0){
				throw new NoNumberException("no number");
			}else{
				int insert = appointmentDao.insertAppointment(bookId, studentId);
				if(insert <= 0){
					throw new RepeatAppointException("repeat appoint");
				}else{
					Appointment appointment=appointmentDao.queryByKeyWithBook(bookId,studentId);
				}
			}
		}
	}
}
